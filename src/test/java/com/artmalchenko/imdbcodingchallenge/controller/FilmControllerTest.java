package com.artmalchenko.imdbcodingchallenge.controller;

import com.artmalchenko.imdbcodingchallenge.dto.FilmDto;
import com.artmalchenko.imdbcodingchallenge.dto.GenreDto;
import com.artmalchenko.imdbcodingchallenge.service.FilmService;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Optional;
import java.util.Random;

import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.is;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.BDDMockito.given;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(FilmController.class)
class FilmControllerTest {

    private FilmDto filmDto;

    @MockBean
    private FilmService filmService;
    @Autowired
    private MockMvc mockMvc;

    @BeforeEach
    public void setup() {
        HashSet<GenreDto> genres = new HashSet<>(Arrays.asList(new GenreDto("Horror"),
                new GenreDto("Action")));
        filmDto = new FilmDto("James Bond", genres);
    }

    @Test
    @DisplayName("GET /films?title - should return 200 OK and Film DTO if successful")
    void findFilmByTitle_verifyReturnsFilmIfFound() throws Exception {
        filmDto.setId(1L);
        String title = "James Bond";

        given(filmService.findFilmByTitle(title)).willReturn(Optional.of(filmDto));
        mockMvc.perform(get("/films")
                        .param("title", title))
                .andExpect(jsonPath("$.id", is(filmDto.getId().intValue())))
                .andExpect(jsonPath("$.title", is(filmDto.getTitle())))
                .andExpect(jsonPath("$.genres[*].name", Matchers.containsInAnyOrder("Horror", "Action")))
                .andExpect(status().isOk());
    }

    @Test
    @DisplayName("GET /films?title - should return 404 if Film not found")
    void findFilmByTitle_verifyReturns404IfNotFound() throws Exception {
        String title = "FilmWhichCertailyDoesntExist";
        given(filmService.findFilmByTitle(title)).willReturn(Optional.empty());
        mockMvc.perform(get("/films")
                        .param("title", title))
                .andExpect(jsonPath("$").doesNotExist())
                .andExpect(status().isNotFound());
    }

    @Test
    @DisplayName("GET /films{id} - should return 200 OK and Film DTO if successful")
    void findFilmById_verifyReturnsFilmIfFound() throws Exception {
        long movieId = 1;
        filmDto.setId(movieId);
        given(filmService.findFilmById(movieId)).willReturn(Optional.of(filmDto));
        mockMvc.perform(get("/films/{id}", 1L))
                .andExpect(jsonPath("$.id", is(filmDto.getId().intValue())))
                .andExpect(jsonPath("$.title", is(filmDto.getTitle())))
                .andExpect(jsonPath("$.genres[*].name", containsInAnyOrder("Horror", "Action")))
                .andExpect(status().isOk());
    }

    @Test
    @DisplayName("GET /films{id} - should return 404 if Film not found")
    void findFilmById_verifyReturns404IfNotFound() throws Exception {
        long movieId = 1;
        given(filmService.findFilmById(movieId)).willReturn(Optional.empty());
        mockMvc.perform(get("/films/{id}", 1L))
                .andExpect(status().isNotFound());
    }

    @Test
    @DisplayName("POST /films - should return 201 Created and created DTO if Film was saved")
    void createFilm_verifySavedObjectIsReturned() throws Exception {
        long autoGeneratedId = new Random().nextLong();
        filmDto.setId(autoGeneratedId);

        given(filmService.saveFilm(any(FilmDto.class))).willReturn(filmDto);
        mockMvc.perform(MockMvcRequestBuilders
                        .post("/films")
                        .content("""
                                {
                                   "title":"James Bond",
                                   "genres":["Horror", "Action"]
                                }
                                """)
                        .contentType(MediaType.APPLICATION_JSON)
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id", is(filmDto.getId())))
                .andExpect(jsonPath("$.title", is(filmDto.getTitle())))
                .andExpect(jsonPath("$.genres[*].name", containsInAnyOrder("Horror", "Action")));
    }

    @Test
    @DisplayName("DELETE /films{id} - should return 200 OK if deletion was successful")
    void deleteFilmById_shouldReturn200IfSuccess() throws Exception {
        mockMvc.perform(delete("/films/{id}", 1L))
                .andExpect(status().isOk());
    }

}
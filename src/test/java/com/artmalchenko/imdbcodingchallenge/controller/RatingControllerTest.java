package com.artmalchenko.imdbcodingchallenge.controller;

import com.artmalchenko.imdbcodingchallenge.dto.RatingDto;
import com.artmalchenko.imdbcodingchallenge.service.RatingService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import java.util.Random;

import static org.hamcrest.Matchers.is;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.BDDMockito.given;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(RatingController.class)
class RatingControllerTest {

    @MockBean
    private RatingService ratingService;

    @Autowired
    private MockMvc mockMvc;

    private RatingDto ratingDto;

    @BeforeEach
    public void setup() {
        ratingDto = new RatingDto(2L, 3L, 3);
    }

    @Test
    @DisplayName("POST /ratings - should return 201 Created and created entity if successful")
    void submitRating_shouldReturn201AndCreatedEntityIfSuccessful() throws Exception {
        long autoGeneratedId = new Random().nextLong();
        ratingDto.setId(autoGeneratedId);
        given(ratingService.saveRating(any(RatingDto.class))).willReturn(ratingDto);
        mockMvc.perform(MockMvcRequestBuilders
                        .post("/ratings")
                        .content("""
                                {
                                   "userId":2,
                                   "filmId":3,
                                   "rating":3
                                }
                                """)
                        .contentType(MediaType.APPLICATION_JSON)
                        .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.id", is(ratingDto.getId())))
                .andExpect(jsonPath("$.userId", is(ratingDto.getUserId().intValue())))
                .andExpect(jsonPath("$.filmId", is(ratingDto.getFilmId().intValue())))
                .andExpect(jsonPath("$.rating", is(ratingDto.getRating())));
    }

}